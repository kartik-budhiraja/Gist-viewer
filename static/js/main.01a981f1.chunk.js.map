{"version":3,"sources":["Services/gist-service.js","Pages/Search.jsx","App.js","serviceWorker.js","index.js"],"names":["list","username","a","fetch","response","json","data","message","cleanedUpData","map","gist","filesArray","Object","keys","files","key","Promise","all","forks_url","forkResponse","forkInfo","slice","dataWithForkInfo","Search","Input","Column","AntTable","openInNewTab","url","window","open","SearchPage","useState","gists","setGists","loading","setLoading","setUsername","useEffect","listFn","effect","className","span","placeholder","onSearch","value","enterButton","length","description","type","showIcon","Table","dataSource","pagination","pageSize","position","title","dataIndex","name","width","ellipsis","render","file","language","filename","color","forks","Group","fork","owner","login","id","src","avatar_url","onClick","html_url","GithubOutlined","App","Boolean","location","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console"],"mappings":"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","file":"static/js/main.01a981f1.chunk.js","sourcesContent":["export const NOT_FOUND = \"Not Found\";\nexport const ERROR = \"error\";\n\nexport async function list(username) {\n  try {\n    const response = await fetch(\n      `https://api.github.com/users/${username}/gists`\n    );\n    const data = await response.json();\n    // Return with error message\n    if (data?.message === NOT_FOUND) {\n      return data;\n    }\n\n    // Convert files object into array to display tags\n    const cleanedUpData = data?.map((gist) => {\n      const filesArray = Object.keys(gist.files).map((key) => gist.files[key]);\n      return { ...gist, files: filesArray };\n    });\n\n    // Get fork info for each gist\n    const dataWithForkInfo = await Promise.all(\n      cleanedUpData?.map(async (gist) => {\n        const forkResponse = await fetch(gist?.forks_url);\n        const forkInfo = await forkResponse.json();\n\n        // Get the latest 3\n        return { ...gist, forkInfo: forkInfo.slice(-3) };\n      })\n    );\n\n    return dataWithForkInfo;\n  } catch (err) {\n    return { message: ERROR };\n  }\n}\n","import {\n  Row,\n  Col,\n  Input,\n  Spin,\n  Alert,\n  Avatar,\n  Table as AntTable,\n  Tag,\n  Tooltip,\n} from \"antd\";\nimport React, { useEffect, useState } from \"react\";\nimport { GithubOutlined } from \"@ant-design/icons\";\nimport { NOT_FOUND, list as listFn, ERROR } from \"../Services/gist-service\";\nimport Text from \"antd/lib/typography/Text\";\n\nconst { Search } = Input;\nconst { Column } = AntTable;\n\nconst openInNewTab = (url) => {\n  // noopener,noreferrer is required for secuirty basis\n  if (url) window.open(url, \"_blank\", \"noopener,noreferrer\");\n};\n\nconst SearchPage = () => {\n  const [gists, setGists] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [username, setUsername] = useState(\"\");\n\n  useEffect(() => {\n    async function effect() {\n      setLoading(true);\n      setGists(await listFn(username));\n      setLoading(false);\n    }\n\n    if (username) effect();\n  }, [username]);\n\n  return (\n    <div className=\"container\">\n      <Row>\n        <Col span={24} className=\"search-container\">\n          <Text>Gist Viewer</Text>\n        </Col>\n        <Col span={24} className=\"search-container\">\n          <Search\n            className=\"search\"\n            placeholder=\"Enter username\"\n            onSearch={(value) => setUsername(value)}\n            enterButton\n          />\n        </Col>\n      </Row>\n      {loading && <Spin className=\"loading\" />}\n      {!loading && gists.length === 0 && username && (\n        <Alert\n          description=\"No gists found for this user\"\n          type=\"info\"\n          showIcon\n        />\n      )}\n      {!loading && gists.message === NOT_FOUND && (\n        <Alert\n          message=\"Error\"\n          description=\"Please enter a valid github username\"\n          type=\"error\"\n          showIcon\n        />\n      )}\n      {!loading && gists.message === ERROR && (\n        <Alert\n          message=\"Error\"\n          description=\"Something went wrong, please try again\"\n          type=\"error\"\n          showIcon\n        />\n      )}\n      {!loading && gists?.length > 0 && <Table data={gists} />}\n    </div>\n  );\n};\n\nexport default SearchPage;\n\nconst Table = ({ data }) => {\n  return (\n    <>\n      <AntTable\n        dataSource={data}\n        pagination={{ pageSize: 20, position: [\"bottomCenter\"] }}\n      >\n        <Column\n          title=\"Description\"\n          dataIndex=\"description\"\n          name=\"description\"\n          width=\"40%\"\n          ellipsis\n          render={(description) => description || \"No Description\"}\n        />\n        <Column\n          title=\"Files\"\n          dataIndex=\"files\"\n          name=\"files\"\n          width=\"30%\"\n          render={(files) =>\n            files.map((file) =>\n              file.language ? (\n                <Tag className=\"language-tag\" key={file.filename} color=\"blue\">\n                  {file.language}\n                </Tag>\n              ) : null\n            )\n          }\n        />\n        <Column\n          title=\"Forks\"\n          dataIndex=\"forkInfo\"\n          name=\"forkInfo\"\n          width=\"20%\"\n          render={(forks) => (\n            <Avatar.Group>\n              {forks.map((fork) => (\n                <Tooltip title={fork?.owner?.login} key={fork?.id}>\n                  <Avatar\n                    src={fork?.owner?.avatar_url}\n                    onClick={() => openInNewTab(fork?.html_url)}\n                  />\n                </Tooltip>\n              ))}\n            </Avatar.Group>\n          )}\n        />\n        <Column\n          title=\"Action\"\n          dataIndex=\"html_url\"\n          name=\"html_url\"\n          width=\"10%\"\n          render={(url) => (\n            <GithubOutlined\n              className=\"github-icon\"\n              onClick={() => openInNewTab(url)}\n            />\n          )}\n        />\n      </AntTable>\n    </>\n  );\n};\n","import React from \"react\";\nimport \"./App.css\";\nimport SearchPage from \"./Pages/Search\";\n\nfunction App() {\n  return <SearchPage />;\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}